"""Initial user-service migration

Revision ID: e71486370cde
Revises: 
Create Date: 2025-07-28 14:30:13.715694

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'e71486370cde'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('companies',
    sa.Column('company_id', sa.Integer(), nullable=False),
    sa.Column('company_name', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('company_id'),
    sa.UniqueConstraint('company_name')
    )
    op.create_table('users',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('company_id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('full_name', sa.String(), nullable=False),
    sa.Column('job_title', sa.String(), nullable=True),
    sa.Column('department', sa.String(), nullable=True),
    sa.Column('reporting_manager_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['company_id'], ['companies.company_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['reporting_manager_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('user_id'),
    sa.UniqueConstraint('company_id', 'email', name='uq_company_email')
    )
    op.create_table('appreciations',
    sa.Column('appreciation_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('recipient_id', sa.UUID(), nullable=False),
    sa.Column('giver_id', sa.UUID(), nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['giver_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['recipient_id'], ['users.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('appreciation_id')
    )
    op.create_table('employee_ratings',
    sa.Column('rating_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('rated_by_id', sa.UUID(), nullable=False),
    sa.Column('rating_period', sa.DateTime(), nullable=False),
    sa.Column('score', sa.DECIMAL(precision=3, scale=2), nullable=False),
    sa.Column('comments', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['rated_by_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('rating_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('test_results',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('run_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('test_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('passed', 'failed', 'error', 'skipped', name='testresultstatus'), autoincrement=False, nullable=True),
    sa.Column('logs', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('error', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metrics', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['run_id'], ['test_runs.id'], name='test_results_run_id_fkey'),
    sa.ForeignKeyConstraint(['test_id'], ['tests.id'], name='test_results_test_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='test_results_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('tests',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('type', postgresql.ENUM('functional', 'load', 'security', name='testtype'), autoincrement=False, nullable=False),
    sa.Column('path', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='tests_pkey'),
    sa.UniqueConstraint('name', name='tests_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('artifacts',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('result_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('type', postgresql.ENUM('screenshot', 'video', 'log', 'report', name='artifacttype'), autoincrement=False, nullable=True),
    sa.Column('url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['result_id'], ['test_results.id'], name=op.f('artifacts_result_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('artifacts_pkey'))
    )
    op.create_table('test_runs',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('suite_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('test_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('pending', 'running', 'passed', 'failed', 'cancelled', name='testrunstatus'), autoincrement=False, nullable=True),
    sa.Column('triggered_by', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('environment', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('finished_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('config', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['suite_id'], ['test_suites.id'], name=op.f('test_runs_suite_id_fkey')),
    sa.ForeignKeyConstraint(['test_id'], ['tests.id'], name=op.f('test_runs_test_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('test_runs_pkey'))
    )
    op.create_table('test_suites',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('test_suites_pkey')),
    sa.UniqueConstraint('name', name=op.f('test_suites_name_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.drop_table('employee_ratings')
    op.drop_table('appreciations')
    op.drop_table('users')
    op.drop_table('companies')
    # ### end Alembic commands ###
